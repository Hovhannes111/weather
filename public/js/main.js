/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/main.js":
/*!******************************!*\
  !*** ./resources/js/main.js ***!
  \******************************/
/***/ (() => {

eval("$(document).ready(function () {\n  $(\"#country\").on('change', function () {\n    if ($('.button:not(d-none)')) {\n      $(\"button\").addClass(\"d-none\");\n    }\n\n    var selectedCountry = +$(this).find(\":selected\").attr(\"data-id\");\n\n    if (selectedCountry) {\n      $.ajax({\n        type: 'GET',\n        url: '/states/' + selectedCountry,\n        success: function success(res) {\n          if (res.length !== 0) {\n            if ($('.button:not(d-none)')) {\n              $(\"button\").addClass(\"d-none\");\n            }\n\n            $(\"#state-section\").removeClass(\"d-none\");\n            var html = '<option value=\"0\" data-id=\"0\">Please select your state</option>';\n\n            for (var i = 0; i < res.length; i++) {\n              var value = res[i];\n              html += \"<option\\n                                        value=\".concat(value.name, \"\\n                                        data-id=\").concat(value.id, \"\\n                                        data-lat=\").concat(value.latitude, \"\\n                                        data-lon=\").concat(value.longitude, \"\\n                                    >\").concat(value.name, \"</option>\");\n            }\n\n            $('#state').append(html);\n          } else {\n            $(\"#state-section\").addClass(\"d-none\");\n            $(\"button\").removeClass(\"d-none\");\n          }\n        }\n      });\n    } else {\n      $(\"#state-section\").addClass(\"d-none\");\n    }\n\n    $(\"#city-section\").addClass(\"d-none\");\n    $('#city').find('option').remove().end();\n    $('#state').find('option').remove().end();\n  });\n  $(\"#state\").on('change', function () {\n    var selectedState = +$('#state').find(\":selected\").attr(\"data-id\");\n\n    if (selectedState !== 0) {\n      $.ajax({\n        type: 'GET',\n        url: '/getCitiesByState/' + selectedState,\n        success: function success(res) {\n          if (res.length !== 0) {\n            if ($('.button:not(d-none)')) {\n              $(\"button\").addClass(\"d-none\");\n            }\n\n            $(\"#city-section\").removeClass(\"d-none\");\n            var html = '<option value=\"0\" data-id=\"0\">Please select your ciry</option>';\n\n            for (var j = 0; j < res.length; j++) {\n              var value = res[j];\n              html += \"<option\\n                                        value=\".concat(value.name, \"\\n                                        data-id=\").concat(value.id, \"\\n                                        data-lat=\").concat(value.latitude, \"\\n                                        data-lon=\").concat(value.longitude, \"\\n                                    >\").concat(value.name, \"</option>\");\n            }\n\n            $('#city').append(html);\n            $(\"#city\").on('change', function () {\n              if (+$('#city').find(\":selected\").attr(\"data-id\") !== 0) {\n                $(\"button\").removeClass(\"d-none\");\n              } else {\n                if ($('.button:not(d-none)')) {\n                  $(\"button\").addClass(\"d-none\");\n                }\n              }\n            });\n          } else {\n            $(\"#city-section\").addClass(\"d-none\");\n            $(\"button\").removeClass(\"d-none\");\n          }\n        }\n      });\n    } else {\n      $(\"#city-section\").addClass(\"d-none\");\n    }\n\n    $('#city').find('option').remove().end();\n  });\n  $(\"#submit\").click(function (e) {\n    $.ajaxSetup({\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      }\n    });\n    var data = new Object();\n    var elem;\n\n    if ($('#city').find('option').length) {\n      elem = $('#city');\n      data.city_id = elem.find(\":selected\").attr(\"data-id\");\n      data.state_id = $('#state').find(\":selected\").attr(\"data-id\");\n      data.country_id = $('#country').find(\":selected\").attr(\"data-id\");\n    } else if (!$('#city').find('option').length && $('#state').find('option').length) {\n      elem = $('#state');\n      data.state_id = elem.find(\":selected\").attr(\"data-id\");\n      data.country_id = $('#country').find(\":selected\").attr(\"data-id\");\n    } else {\n      elem = $('#country');\n      data.country_id = elem.find(\":selected\").attr(\"data-id\");\n    }\n\n    data.latitude = elem.find(\":selected\").attr(\"data-lat\");\n    data.longitude = elem.find(\":selected\").attr(\"data-lon\");\n    e.preventDefault();\n    $.ajax({\n      type: 'POST',\n      url: \"/getWeather\",\n      data: data,\n      success: function success(data) {\n        $('.weather').remove();\n        $('.container').append(\"<h1 class=\\\"weather mt-3\\\">\".concat(data, \" \\xB0C</h1>\"));\n      }\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/main.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/main.js"]();
/******/ 	
/******/ })()
;